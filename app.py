import module.webcraw as wc 
import module.database as db 
import module.flex as flex 
import module.textChecker as tc
from flask import Flask, request, abort , jsonify
import requests
import json
import os 

from dotenv import dotenv_values
config = dotenv_values(".env")
Channel_access_token = config['API_KEY']


app = Flask(__name__)

@app.route('/', methods=['POST', 'GET'])
def webhook():
    if request.method == 'POST':
        payload = request.get_json()
        # print(payload)
        events = payload['events']
        for event in events:
            event_type = event['type']
            Reply_token = event['replyToken']
            if event_type == 'message':
                message = event['message']['text']
                userID = event['source']['userId']
                userName = getUserID(userID , Channel_access_token)
                print(message)
                if tc.detect_gap(message) and len(message) == 3:
                    # print(Reply_token)
                    # print(Reply_message)
                    Reply_message = f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {userName[0]['displayName']} ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ Gap ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö üòäüòä"
                    # print(userName)
                    ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                    msg = flex.sendQuickReply(userID)
                    replyFlexMessage(msg , Channel_access_token)
                    return request.json, 200
                elif "‡∏™‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" in message : 
                    Reply_message = '‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ "‡∏™‡∏°‡∏±‡∏Ñ‡∏£ b6xxxxxxxxx password" ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏ô‡∏ó‡∏£‡∏µ‡∏ô‡∏∞ ü§îü§î'
                    ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                    return request.json, 200
                
                elif "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" in message : 
                    userData = message.split()
                    if len(userData) != 3 : 
                        Reply_message = "‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚ùå‚ùå"
                        ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                        return request.json , 200
                    else : 
                        print(userID , userData[1] , userData[2])
                        if db.findDup(userID , userData[1]) :
                            Reply_message = "‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚ùå‚ùå"
                            ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                            return request.json , 200
                        else :
                            db.insertData(userID , userData[1] , userData[2])
                            Reply_message = "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!!!! ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ‚úÖ"
                            ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                            return request.json, 200
                    
                elif "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" in message : 
                    data = db.findID(userID)
                    if data == -1 :
                        Reply_message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏°‡∏±‡∏Ñ‡∏£ b6xxxxxxxxx password" ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏ô‡∏ó‡∏£‡∏µ‡∏ô‡∏∞ ü§îü§î'
                        ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                        return request.json , 200
                    subData =  wc.login(data[1] , data[2])
                    if subData == -1 : 
                        Reply_message = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin"
                        ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                        return request.json , 404
                    else :
                        msg = flex.sendMessage(userID, subData)
                        replyFlexMessage(msg , Channel_access_token)
                        return request.json , 200
                elif "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" in message :
                    Reply_message = "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‡∏≠‡∏µ‡πÄ‡∏°‡∏• : nutnaphop24@gmail.com üì´üì´" 
                    ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                    return request.json , 200
                elif "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö" in message :
                    Reply_message = '''‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° GAP ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏•‡∏¢!!! (Àâ‚ñΩÔø£ÔΩû) ‡∏ú‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ô‡πÜ‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡∏°‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÄ‡∏Å‡∏£‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ô‡∏π‡πâ‡∏ô‡∏ô‡∏ô‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏ä‡πâ‡∏≤ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏•‡∏∞‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏•‡∏∞ ‚îó|ÔΩÄO‚Ä≤|‚îõ !!! 
‡∏ö‡∏≠‡∏ó‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏Ñ‡∏≠‡∏°‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á üíª'''
                    ReplyMessage(Reply_token, Reply_message, Channel_access_token)
                    return request.json , 200
                elif request.method == 'GET':
                    return 'GET port 80 : Getting Started', 200
                else:
                    Reply_message = 'Gap ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ üò•üò• ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ Gap ‡∏ä‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå GAP ‡∏´‡∏£‡∏∑‡∏≠ gap ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö'
                    ReplyMessage(Reply_token , Reply_message , Channel_access_token)
                    abort(400)
            elif event_type == 'source' : 
                    userID = event['source']['userId']
                    print(userID)
                    getUserID(userID , Channel_access_token)
        return request.json , 200
    elif request.method == 'GET':
        return 'GET port 80 Start', 200
    else : 
        abort(400)
@app.route('/webhook', methods=['GET'])
def hello():
    return 'Get port 80', 200

def ReplyMessage(Reply_token, TextMessage, Line_Acees_Token):
    LINE_API = 'https://api.line.me/v2/bot/message/reply'
    Authorization = 'Bearer {}'.format(Line_Acees_Token)
    headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': Authorization
    }
    data = {
        "replyToken": Reply_token,
        "messages": [{
            "type": "text",
            "text": TextMessage
        }]
    }
    data = json.dumps(data)
    r = requests.post(LINE_API, headers=headers, data=data)
    return r.json(), r.status_code

def getUserID(Profile_ID , Line_Access_Token) : 
    LINE_API = f'https://api.line.me/v2/bot/profile/{Profile_ID}'
    Authorization = 'Bearer {}'.format(Line_Access_Token)
    headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': Authorization
    }

    r = requests.get(LINE_API , headers=headers)
    print(r.json())
    return r.json() , 200 

def replyFlexMessage(message , Line_Access_token) : 
    LINE_API = f'https://api.line.me/v2/bot/message/push'
    Authorization = 'Bearer {}'.format(Line_Access_token)
    headers = {
        'Content-Type': 'application/json; charset=UTF-8',
        'Authorization': Authorization
    }
    data = json.dumps(message)
    r = requests.post(LINE_API , headers=headers , data=data)
    print('Sending')
    return r.json(), 200

@app.route('/register' , methods=['POST']) 
def getRegister() :
    data = request.json
    return jsonify(data)

if __name__ == '__main__':
    app.run(port=80)
